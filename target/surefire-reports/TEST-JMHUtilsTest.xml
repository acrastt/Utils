<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="JMHUtilsTest" time="273.799" tests="3" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/test-classes:/Users/Bohan/IdeaProjects/acrastt.Utils/target/classes:/Users/Bohan/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/Bohan/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-core/1.36/jmh-core-1.36.jar:/Users/Bohan/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.36/jmh-generator-annprocess-1.36.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.jar:/Users/Bohan/.m2/repository/org/slf4j/slf4j-api/2.0.4/slf4j-api-2.0.4.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar:/Users/Bohan/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-commons/1.9.2/junit-platform-commons-1.9.2.jar:/Users/Bohan/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-engine/1.9.2/junit-platform-engine-1.9.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-samples/1.36/jmh-samples-1.36.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Vancouver"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="CA"/>
    <property name="sun.boot.library.path" value="/Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/surefire/surefirebooter-20230313133419987_3.jar /Users/Bohan/IdeaProjects/acrastt.Utils/target/surefire 2023-03-13T13-34-19_522-jvmRun1 surefire-20230313133419987_1tmp surefire_0-20230313133419987_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/test-classes:/Users/Bohan/IdeaProjects/acrastt.Utils/target/classes:/Users/Bohan/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/Bohan/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-core/1.36/jmh-core-1.36.jar:/Users/Bohan/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.36/jmh-generator-annprocess-1.36.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.jar:/Users/Bohan/.m2/repository/org/slf4j/slf4j-api/2.0.4/slf4j-api-2.0.4.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar:/Users/Bohan/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-commons/1.9.2/junit-platform-commons-1.9.2.jar:/Users/Bohan/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-engine/1.9.2/junit-platform-engine-1.9.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-samples/1.36/jmh-samples-1.36.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/Bohan"/>
    <property name="user.language" value="zh"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2023-01-17"/>
    <property name="java.home" value="/Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/Bohan/IdeaProjects/acrastt.Utils"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="jdk.internal.vm.ci.enabled" value="true"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/surefire/surefirebooter-20230313133419987_3.jar"/>
    <property name="user.script" value="Hans"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.6+9-LTS-jvmci-22.3-b11"/>
    <property name="user.name" value="Bohan"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="13.2.1"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="java.vendor.version" value="GraalVM EE 22.3.1"/>
    <property name="localRepository" value="/Users/Bohan/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/var/folders/3w/mvfnnyz506ddfscfd3sf4yfc0000gp/T/"/>
    <property name="idea.version" value="2022.3.3"/>
    <property name="java.version" value="17.0.6"/>
    <property name="user.dir" value="/Users/Bohan/IdeaProjects/acrastt.Utils"/>
    <property name="os.arch" value="x86_64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/Bohan/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.6+9-LTS-jvmci-22.3-b11"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="testCSV" classname="JMHUtilsTest" time="156.811">
    <system-out><![CDATA[# JMH version: 1.36
# VM version: JDK 17.0.6, Java HotSpot(TM) 64-Bit Server VM, 17.0.6+9-LTS-jvmci-22.3-b11
# VM invoker: /Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:JVMCIThreadsPerNativeLibraryRuntime=1 -XX:-UnlockExperimentalVMOptions -javaagent:/Users/Bohan/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/Users/Bohan/IdeaProjects/acrastt.Utils/target/jacoco.exec
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 668727550.669 ops/s
# Warmup Iteration   2: 781972059.775 ops/s
# Warmup Iteration   3: 814564565.099 ops/s
# Warmup Iteration   4: 400969114.118 ops/s
# Warmup Iteration   5: 578961906.384 ops/s
Iteration   1: 543303280.086 ops/s
Iteration   2: 511274085.931 ops/s
Iteration   3: 514168049.101 ops/s
Iteration   4: 773897962.668 ops/s
Iteration   5: 792530106.802 ops/s

# Run progress: 20.00% complete, ETA 00:06:44
# Fork: 2 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 914184127.646 ops/s
# Warmup Iteration   2: 888530578.299 ops/s
# Warmup Iteration   3: 795944255.193 ops/s
# Warmup Iteration   4: 387216996.391 ops/s
# Warmup Iteration   5: 503883284.374 ops/s
Iteration   1: <forked VM failed with exit code 137>
<stdout last='20 lines'>
</stdout>
<stderr last='20 lines'>
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
</stderr>

# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark  Mode  Cnt  Score   Error  Units

Benchmark result is saved to src/test/java/JMH.csv
]]></system-out>
  </testcase>
  <testcase name="testJSON" classname="JMHUtilsTest" time="100.669">
    <system-out><![CDATA[# JMH version: 1.36
# VM version: JDK 17.0.6, Java HotSpot(TM) 64-Bit Server VM, 17.0.6+9-LTS-jvmci-22.3-b11
# VM invoker: /Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:JVMCIThreadsPerNativeLibraryRuntime=1 -XX:-UnlockExperimentalVMOptions -javaagent:/Users/Bohan/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/Users/Bohan/IdeaProjects/acrastt.Utils/target/jacoco.exec
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 664539361.618 ops/s
# Warmup Iteration   2: 649399370.705 ops/s
# Warmup Iteration   3: 744144899.891 ops/s
# Warmup Iteration   4: 532744323.439 ops/s
# Warmup Iteration   5: 606072435.513 ops/s
Iteration   1: 688950917.346 ops/s
Iteration   2: 747372569.019 ops/s
Iteration   3: 681835307.179 ops/s
Iteration   4: 464181895.867 ops/s
Iteration   5: <forked VM failed with exit code 137>
<stdout last='20 lines'>
</stdout>
<stderr last='20 lines'>
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
</stderr>

# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark  Mode  Cnt  Score   Error  Units

Benchmark result is saved to src/test/java/JMH.json
]]></system-out>
  </testcase>
  <testcase name="testGC" classname="JMHUtilsTest" time="16.312">
    <system-out><![CDATA[# JMH version: 1.36
# VM version: JDK 17.0.6, Java HotSpot(TM) 64-Bit Server VM, 17.0.6+9-LTS-jvmci-22.3-b11
# VM invoker: /Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:JVMCIThreadsPerNativeLibraryRuntime=1 -XX:-UnlockExperimentalVMOptions -javaagent:/Users/Bohan/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/Users/Bohan/IdeaProjects/acrastt.Utils/target/jacoco.exec
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 894919566.004 ops/s
# Warmup Iteration   2: <forked VM failed with exit code 137>
<stdout last='20 lines'>
</stdout>
<stderr last='20 lines'>
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
</stderr>

# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark  Mode  Cnt  Score   Error  Units
]]></system-out>
  </testcase>
</testsuite>