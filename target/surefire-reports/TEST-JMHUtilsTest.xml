<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="JMHUtilsTest" time="1,523.58" tests="3" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/test-classes:/Users/Bohan/IdeaProjects/acrastt.Utils/target/classes:/Users/Bohan/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/Bohan/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-core/1.36/jmh-core-1.36.jar:/Users/Bohan/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.36/jmh-generator-annprocess-1.36.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.jar:/Users/Bohan/.m2/repository/org/slf4j/slf4j-api/2.0.4/slf4j-api-2.0.4.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar:/Users/Bohan/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-commons/1.9.2/junit-platform-commons-1.9.2.jar:/Users/Bohan/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-engine/1.9.2/junit-platform-engine-1.9.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-samples/1.36/jmh-samples-1.36.jar:/Users/Bohan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.12.7.1/jackson-databind-2.12.7.1.jar:/Users/Bohan/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.12.7/jackson-annotations-2.12.7.jar:/Users/Bohan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.7/jackson-core-2.12.7.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Vancouver"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="CA"/>
    <property name="sun.boot.library.path" value="/Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/surefire/surefirebooter-20230313145316837_3.jar /Users/Bohan/IdeaProjects/acrastt.Utils/target/surefire 2023-03-13T14-53-16_459-jvmRun1 surefire-20230313145316837_1tmp surefire_0-20230313145316837_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/test-classes:/Users/Bohan/IdeaProjects/acrastt.Utils/target/classes:/Users/Bohan/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/Bohan/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-core/1.36/jmh-core-1.36.jar:/Users/Bohan/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/Bohan/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.36/jmh-generator-annprocess-1.36.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.jar:/Users/Bohan/.m2/repository/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.jar:/Users/Bohan/.m2/repository/org/slf4j/slf4j-api/2.0.4/slf4j-api-2.0.4.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar:/Users/Bohan/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-commons/1.9.2/junit-platform-commons-1.9.2.jar:/Users/Bohan/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/Bohan/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar:/Users/Bohan/.m2/repository/org/junit/platform/junit-platform-engine/1.9.2/junit-platform-engine-1.9.2.jar:/Users/Bohan/.m2/repository/org/openjdk/jmh/jmh-samples/1.36/jmh-samples-1.36.jar:/Users/Bohan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.12.7.1/jackson-databind-2.12.7.1.jar:/Users/Bohan/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.12.7/jackson-annotations-2.12.7.jar:/Users/Bohan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.7/jackson-core-2.12.7.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/Bohan"/>
    <property name="user.language" value="zh"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="org.graalvm.nativeimage.imagecode" value="agent"/>
    <property name="java.version.date" value="2023-01-17"/>
    <property name="java.home" value="/Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/Bohan/IdeaProjects/acrastt.Utils"/>
    <property name="java.vm.compressedOopsMode" value="Non-zero disjoint base"/>
    <property name="jdk.internal.vm.ci.enabled" value="true"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/surefire/surefirebooter-20230313145316837_3.jar"/>
    <property name="junit.platform.listeners.uid.tracking.enabled" value="true"/>
    <property name="user.script" value="Hans"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="junit.platform.listeners.uid.tracking.output.dir" value="/Users/Bohan/IdeaProjects/acrastt.Utils/target/test-ids"/>
    <property name="java.runtime.version" value="17.0.6+9-LTS-jvmci-22.3-b11"/>
    <property name="user.name" value="Bohan"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="13.2.1"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="java.vendor.version" value="GraalVM EE 22.3.1"/>
    <property name="localRepository" value="/Users/Bohan/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/var/folders/3w/mvfnnyz506ddfscfd3sf4yfc0000gp/T/"/>
    <property name="idea.version" value="2022.3.3"/>
    <property name="java.version" value="17.0.6"/>
    <property name="user.dir" value="/Users/Bohan/IdeaProjects/acrastt.Utils"/>
    <property name="os.arch" value="x86_64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/Bohan/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.6+9-LTS-jvmci-22.3-b11"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="testCSV" classname="JMHUtilsTest" time="505.625">
    <system-out><![CDATA[# JMH version: 1.36
# VM version: JDK 17.0.6, Java HotSpot(TM) 64-Bit Server VM, 17.0.6+9-LTS-jvmci-22.3-b11
# VM invoker: /Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:JVMCIThreadsPerNativeLibraryRuntime=1 -XX:-UnlockExperimentalVMOptions -agentlib:native-image-agent=config-output-dir=/Users/Bohan/IdeaProjects/acrastt.Utils/target/native/agent-output/test/session-{pid}-{datetime}
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2516918915.089 ops/s
# Warmup Iteration   2: 2066476084.119 ops/s
# Warmup Iteration   3: 4522520043.467 ops/s
# Warmup Iteration   4: 4432027930.963 ops/s
# Warmup Iteration   5: 4006148932.983 ops/s
Iteration   1: 3780426568.436 ops/s
Iteration   2: 4247308632.478 ops/s
Iteration   3: 4268227411.175 ops/s
Iteration   4: 4227995840.602 ops/s
Iteration   5: 4269007206.487 ops/s

# Run progress: 20.00% complete, ETA 00:06:44
# Fork: 2 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2261664555.343 ops/s
# Warmup Iteration   2: 1943108759.824 ops/s
# Warmup Iteration   3: 4261912372.917 ops/s
# Warmup Iteration   4: 3951568426.838 ops/s
# Warmup Iteration   5: 4262432359.946 ops/s
Iteration   1: 4232786469.218 ops/s
Iteration   2: 4278315908.025 ops/s
Iteration   3: 4292279073.767 ops/s
Iteration   4: 4242695243.892 ops/s
Iteration   5: 4247899908.046 ops/s

# Run progress: 40.00% complete, ETA 00:05:03
# Fork: 3 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2274699515.605 ops/s
# Warmup Iteration   2: 1944622213.982 ops/s
# Warmup Iteration   3: 4285185747.223 ops/s
# Warmup Iteration   4: 4324872586.926 ops/s
# Warmup Iteration   5: 4278817933.413 ops/s
Iteration   1: 4296516059.208 ops/s
Iteration   2: 4281254404.484 ops/s
Iteration   3: 4244882863.565 ops/s
Iteration   4: 4321691672.399 ops/s
Iteration   5: 4348521799.286 ops/s

# Run progress: 60.00% complete, ETA 00:03:22
# Fork: 4 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2308286022.225 ops/s
# Warmup Iteration   2: 1796082714.678 ops/s
# Warmup Iteration   3: 4369547321.452 ops/s
# Warmup Iteration   4: 4373227139.417 ops/s
# Warmup Iteration   5: 4277886271.670 ops/s
Iteration   1: 4375161693.028 ops/s
Iteration   2: 4405370932.782 ops/s
Iteration   3: 4449245451.644 ops/s
Iteration   4: 4440306029.853 ops/s
Iteration   5: 4458555192.337 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2354995727.389 ops/s
# Warmup Iteration   2: 1821132163.571 ops/s
# Warmup Iteration   3: 4244637204.266 ops/s
# Warmup Iteration   4: 4361754790.321 ops/s
# Warmup Iteration   5: 4430757524.429 ops/s
Iteration   1: 4439506555.911 ops/s
Iteration   2: 4452751353.954 ops/s
Iteration   3: 4477607900.924 ops/s
Iteration   4: 3958821835.890 ops/s
Iteration   5: 2717216049.082 ops/s


Result "org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere":
  4230174082.259 ±(99.9%) 262848871.665 ops/s [Average]
  (min, avg, max) = (2717216049.082, 4230174082.259, 4477607900.924), stdev = 350895723.503
  CI (99.9%): [3967325210.594, 4493022953.924] (assumes normal distribution)


# Run complete. Total time: 00:08:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                Mode  Cnt           Score           Error  Units
JMHSample_01_HelloWorld.wellHelloThere  thrpt   25  4230174082.259 ± 262848871.665  ops/s

Benchmark result is saved to src/test/java/JMH.csv
]]></system-out>
  </testcase>
  <testcase name="testJSON" classname="JMHUtilsTest" time="509.812">
    <system-out><![CDATA[# JMH version: 1.36
# VM version: JDK 17.0.6, Java HotSpot(TM) 64-Bit Server VM, 17.0.6+9-LTS-jvmci-22.3-b11
# VM invoker: /Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:JVMCIThreadsPerNativeLibraryRuntime=1 -XX:-UnlockExperimentalVMOptions -agentlib:native-image-agent=config-output-dir=/Users/Bohan/IdeaProjects/acrastt.Utils/target/native/agent-output/test/session-{pid}-{datetime}
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2200764285.271 ops/s
# Warmup Iteration   2: 1972179702.702 ops/s
# Warmup Iteration   3: 3706599384.944 ops/s
# Warmup Iteration   4: 1641472303.553 ops/s
# Warmup Iteration   5: 3017954833.425 ops/s
Iteration   1: 3574933781.542 ops/s
Iteration   2: 3881859726.502 ops/s
Iteration   3: 2551944300.463 ops/s
Iteration   4: 2587955084.355 ops/s
Iteration   5: 4056082009.260 ops/s

# Run progress: 20.00% complete, ETA 00:06:51
# Fork: 2 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2304867997.721 ops/s
# Warmup Iteration   2: 1393093498.421 ops/s
# Warmup Iteration   3: 3929918955.556 ops/s
# Warmup Iteration   4: 3428523939.547 ops/s
# Warmup Iteration   5: 3296014556.493 ops/s
Iteration   1: 3702311801.461 ops/s
Iteration   2: 3988645399.238 ops/s
Iteration   3: 3758269845.308 ops/s
Iteration   4: 4344992600.766 ops/s
Iteration   5: 3208035269.222 ops/s

# Run progress: 40.00% complete, ETA 00:05:06
# Fork: 3 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 1622242128.525 ops/s
# Warmup Iteration   2: 1468880942.138 ops/s
# Warmup Iteration   3: 3421495706.613 ops/s
# Warmup Iteration   4: 3436583361.847 ops/s
# Warmup Iteration   5: 3869449116.487 ops/s
Iteration   1: 4035723272.754 ops/s
Iteration   2: 4479770115.669 ops/s
Iteration   3: 3995984168.511 ops/s
Iteration   4: 1926820197.772 ops/s
Iteration   5: 2754835721.900 ops/s

# Run progress: 60.00% complete, ETA 00:03:24
# Fork: 4 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 1302861093.043 ops/s
# Warmup Iteration   2: 1684925974.985 ops/s
# Warmup Iteration   3: 3620785703.445 ops/s
# Warmup Iteration   4: 3420433371.189 ops/s
# Warmup Iteration   5: 3823416281.717 ops/s
Iteration   1: 4027954899.751 ops/s
Iteration   2: 3882917547.748 ops/s
Iteration   3: 3537632348.601 ops/s
Iteration   4: 2240878436.542 ops/s
Iteration   5: 3717488552.253 ops/s

# Run progress: 80.00% complete, ETA 00:01:42
# Fork: 5 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 1379719507.557 ops/s
# Warmup Iteration   2: 1561946552.195 ops/s
# Warmup Iteration   3: 2592709559.280 ops/s
# Warmup Iteration   4: 2678238288.034 ops/s
# Warmup Iteration   5: 2277120733.796 ops/s
Iteration   1: 1912590557.391 ops/s
Iteration   2: 3424030629.796 ops/s
Iteration   3: 4019218684.268 ops/s
Iteration   4: 3454556147.447 ops/s
Iteration   5: 3626014173.193 ops/s


Result "org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere":
  3467657810.869 ±(99.9%) 545050116.212 ops/s [Average]
  (min, avg, max) = (1912590557.391, 3467657810.869, 4479770115.669), stdev = 727626311.128
  CI (99.9%): [2922607694.656, 4012707927.081] (assumes normal distribution)


# Run complete. Total time: 00:08:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                Mode  Cnt           Score           Error  Units
JMHSample_01_HelloWorld.wellHelloThere  thrpt   25  3467657810.869 ± 545050116.212  ops/s

Benchmark result is saved to src/test/java/JMH.json
]]></system-out>
  </testcase>
  <testcase name="testGC" classname="JMHUtilsTest" time="508.116">
    <system-out><![CDATA[# JMH version: 1.36
# VM version: JDK 17.0.6, Java HotSpot(TM) 64-Bit Server VM, 17.0.6+9-LTS-jvmci-22.3-b11
# VM invoker: /Users/Bohan/graalvm-ee-java17-22.3.1/Contents/Home/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:JVMCIThreadsPerNativeLibraryRuntime=1 -XX:-UnlockExperimentalVMOptions -agentlib:native-image-agent=config-output-dir=/Users/Bohan/IdeaProjects/acrastt.Utils/target/native/agent-output/test/session-{pid}-{datetime}
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2164757560.931 ops/s
# Warmup Iteration   2: 1557483350.094 ops/s
# Warmup Iteration   3: 3286892227.986 ops/s
# Warmup Iteration   4: 4370707045.262 ops/s
# Warmup Iteration   5: 4203503284.118 ops/s
Iteration   1: 4244096735.067 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4535950842.680 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4542423227.966 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2983658350.549 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2956213212.042 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 20.00% complete, ETA 00:06:47
# Fork: 2 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 1803918215.604 ops/s
# Warmup Iteration   2: 1488871426.877 ops/s
# Warmup Iteration   3: 2643811723.065 ops/s
# Warmup Iteration   4: 3399309063.937 ops/s
# Warmup Iteration   5: 4205767568.678 ops/s
Iteration   1: 3786625648.445 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3890311359.728 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3727758420.596 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3095733312.219 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3700580309.459 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 40.00% complete, ETA 00:05:05
# Fork: 3 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2103389442.521 ops/s
# Warmup Iteration   2: 1726567294.746 ops/s
# Warmup Iteration   3: 3378636651.487 ops/s
# Warmup Iteration   4: 3242383258.788 ops/s
# Warmup Iteration   5: 2782057529.179 ops/s
Iteration   1: 3360046854.811 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2582938179.043 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2872786998.283 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3621080332.035 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2354480850.698 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 60.00% complete, ETA 00:03:23
# Fork: 4 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 1777540466.342 ops/s
# Warmup Iteration   2: 1477267908.654 ops/s
# Warmup Iteration   3: 3398125200.149 ops/s
# Warmup Iteration   4: 3360620750.909 ops/s
# Warmup Iteration   5: 2742821823.824 ops/s
Iteration   1: 2515102855.919 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2990329113.078 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3348926316.591 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3340157819.736 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3221357554.464 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 80.00% complete, ETA 00:01:41
# Fork: 5 of 5
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2145324957.326 ops/s
# Warmup Iteration   2: 1507054425.288 ops/s
# Warmup Iteration   3: 3653410076.973 ops/s
# Warmup Iteration   4: 3916332271.612 ops/s
# Warmup Iteration   5: 4006927086.037 ops/s
Iteration   1: 2408883102.153 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3030361662.708 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2216243491.910 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2870307709.430 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2466202086.267 ops/s
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁸ B/op
                 ·gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere":
  3226502253.835 ±(99.9%) 492081370.715 ops/s [Average]
  (min, avg, max) = (2216243491.910, 3226502253.835, 4542423227.966), stdev = 656914551.338
  CI (99.9%): [2734420883.120, 3718583624.550] (assumes normal distribution)

Secondary result "org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere:·gc.alloc.rate.norm":
  ≈ 10⁻⁸ B/op

Secondary result "org.openjdk.jmh.samples.JMHSample_01_HelloWorld.wellHelloThere:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                    Mode  Cnt           Score           Error   Units
JMHSample_01_HelloWorld.wellHelloThere                      thrpt   25  3226502253.835 ± 492081370.715   ops/s
JMHSample_01_HelloWorld.wellHelloThere:·gc.alloc.rate       thrpt   25          ≈ 10⁻⁴                  MB/sec
JMHSample_01_HelloWorld.wellHelloThere:·gc.alloc.rate.norm  thrpt   25          ≈ 10⁻⁸                    B/op
JMHSample_01_HelloWorld.wellHelloThere:·gc.count            thrpt   25             ≈ 0                  counts
]]></system-out>
  </testcase>
</testsuite>